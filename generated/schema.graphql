### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AddOn {
  foods: [Food]
  id: String
  isRequired: Boolean
  items: [Item]
  name: String
}

type BaseFood {
  id: String
  name: String
  price: Float
}

type Checkout {
  clientSecret: String
  id: String
  status: String
  total: Float
}

input CheckoutCalculateInput {
  id: String
  orders: [CreateOrderInput!]
}

input CreateAddOnInput {
  id: String
  isRequired: Boolean!
  items: [CreateItemInput!]!
  name: String!
}

input CreateFoodInput {
  addOns: [CreateAddOnInput!]
  category: String!
  description: String
  id: String
  image: String
  name: String!
  price: Float
  sizes: [CreateFoodSizeInput!]
}

input CreateFoodSizeInput {
  addOns: [CreateAddOnInput!]!
  id: String
  name: String!
  price: Float!
}

input CreateItemInput {
  id: String
  itemSizes: [ItemSizeInput!]
  name: String!
  price: Float!
}

input CreateOrderInput {
  foodId: String!
  id: String
  itemIds: [String]!
  quantity: Int!
}

input CreateOrderItemInput {
  foodId: String!
  id: String
  items: [String!]!
}

input DayInput {
  dayOfWeek: String!
  time: [TimeInput!]!
}

type DayOutput {
  dayOfWeek: String!
  time: [TimeOutput!]!
}

type Food {
  addOns: [AddOn]
  description: String
  id: String
  image: String
  name: String
  price: Float
  sizes: [FoodSize]
}

type FoodSize {
  addOns: [AddOn]
  id: String
  name: String
  price: Float
}

type FoodsByCategory {
  category: String!
  foods: [SimpleFood!]
}

type Item {
  addOns: [AddOn]
  id: String
  itemSizes: [ItemSize]
  name: String
  price: Float
}

type ItemSize {
  default: Boolean
  id: String
  name: String
  price: Float
}

input ItemSizeInput {
  default: Boolean
  id: String
  name: String!
  price: Float!
}

type Location {
  id: String
  latitude: Float
  longitude: Float
}

input LocationInput {
  latitude: Float
  longitude: Float
}

type Mutation {
  CheckoutCalculateMut(input: [ShoppingCartInput]!, paymentMethodId: String!): Checkout!
  addOpeningHours(openingHours: [DayInput!]!, restaurantId: String!): Boolean
  createFood(input: CreateFoodInput!, restaurantId: String!): Food!
  createOrder(input: CreateOrderInput!): Order!
}

type OpeningHour {
  closeTime: String!
  dayOfWeek: String!
  id: Int!
  openTime: String!
  restaurantId: Int!
}

type Order {
  id: String
  orderItems: [OrderItem]
  total: Float
}

type OrderDetailsType {
  currentDateTime: String!
  deliveryAddress: String
  deliveryAddressAdditionalInfo: String
  deliveryDetails: String
  isDeliveryAddressValid: Boolean!
  isOpenNow: Boolean!
  isOrderTimeValid: Boolean!
  isPickUp: Boolean!
}

type OrderItem {
  food: Food
  id: String
  items: [Item]
}

type Query {
  addOns: [AddOn]!
  foodById(id: String!): Food
  foods: [Food]!
  foodsByCategory: [FoodsByCategory]!
  restaurant(input: RestaurantInput!): RestaurantOutput!
  validateOrderDetails(input: ValidateOrderDetailsInput!): ValidateOrderDetailsOutput!
  validateShoppingCart(input: [ShoppingCartInput]!): ShoppingCart!
}

input RestaurantInput {
  deliveryAddress: String
  deliveryAddressAdditionalInfo: String
  deliveryDetails: String
  isPickUp: Boolean!
  orderTime: String!
  restaurantId: String!
}

type RestaurantOutput {
  orderDetails: OrderDetailsType!
  restaurantDetails: RestaurantType!
}

type RestaurantType {
  address: String!
  deliveryOffset: Int!
  location: Location!
  menu: [FoodsByCategory!]!
  name: String!
  openingHours: [DayOutput!]!
  pickUpOffset: Int!
  radius: Float!
  timezone: String!
}

type SelectedItem {
  addOnName: String!
  id: String!
  itemSize: ItemSize
  name: String
  price: Float
}

type ShoppingCart {
  grandTotal: Float
  shoppingCartItems: [ShoppingCartItem]!
  subTotal: Float!
  tax: Float
  tip: Float
}

input ShoppingCartInput {
  foodId: String!
  foodSizeId: String
  isTipPercentage: Boolean
  items: [ShoppingCartItemInput]!
  orderItemId: String!
  quantity: Int!
  tip: Float
}

type ShoppingCartItem {
  food: SimpleFood
  orderItemId: String!
  price: Float!
  quantity: Int!
  selectedItems: [SelectedItem]
  selectedSize: FoodSize
}

input ShoppingCartItemInput {
  addOnName: String!
  itemId: String!
  itemSizeId: String
}

type SimpleFood {
  description: String
  id: String
  image: String
  name: String
  price: Float
  sizes: [FoodSize]
}

type SimpleFoodSize {
  id: String
  name: String
  price: Float
}

input TimeInput {
  closes_at: String
  opens_at: String
}

type TimeOutput {
  closes_at: String
  opens_at: String
}

input ValidateOrderDetailsInput {
  deliveryAddress: String
  deliveryAddressAdditionalInfo: String
  deliveryDetails: String
  isPickUp: Boolean!
  orderTime: String!
  restaurantId: String!
}

type ValidateOrderDetailsOutput {
  orderDetails: OrderDetailsType!
  restaurantDetails: RestaurantType!
}