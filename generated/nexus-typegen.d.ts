/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../types/Context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateAddOnInput: { // input type
    id?: string | null; // String
    isRequired: boolean; // Boolean!
    items: NexusGenInputs['CreateItemInput'][]; // [CreateItemInput!]!
    name: string; // String!
  }
  CreateFoodInput: { // input type
    addOns: NexusGenInputs['CreateAddOnInput'][]; // [CreateAddOnInput!]!
    description?: string | null; // String
    id?: string | null; // String
    name: string; // String!
    price: number; // Float!
  }
  CreateItemInput: { // input type
    id?: string | null; // String
    name: string; // String!
    price: number; // Float!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AddOn: { // root type
    foods?: Array<NexusGenRootTypes['Food'] | null> | null; // [Food]
    id?: string | null; // String
    isRequired?: boolean | null; // Boolean
    items?: Array<NexusGenRootTypes['Item'] | null> | null; // [Item]
    name?: string | null; // String
  }
  Food: { // root type
    addOns?: Array<NexusGenRootTypes['AddOn'] | null> | null; // [AddOn]
    description?: string | null; // String
    id?: string | null; // String
    name?: string | null; // String
    price?: number | null; // Float
  }
  Item: { // root type
    addOns?: Array<NexusGenRootTypes['AddOn'] | null> | null; // [AddOn]
    id?: string | null; // String
    name?: string | null; // String
    price?: number | null; // Float
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AddOn: { // field return type
    foods: Array<NexusGenRootTypes['Food'] | null> | null; // [Food]
    id: string | null; // String
    isRequired: boolean | null; // Boolean
    items: Array<NexusGenRootTypes['Item'] | null> | null; // [Item]
    name: string | null; // String
  }
  Food: { // field return type
    addOns: Array<NexusGenRootTypes['AddOn'] | null> | null; // [AddOn]
    description: string | null; // String
    id: string | null; // String
    name: string | null; // String
    price: number | null; // Float
  }
  Item: { // field return type
    addOns: Array<NexusGenRootTypes['AddOn'] | null> | null; // [AddOn]
    id: string | null; // String
    name: string | null; // String
    price: number | null; // Float
  }
  Mutation: { // field return type
    createLink: NexusGenRootTypes['Food']; // Food!
  }
  Query: { // field return type
    addOns: Array<NexusGenRootTypes['AddOn'] | null>; // [AddOn]!
    foods: Array<NexusGenRootTypes['Food'] | null>; // [Food]!
    items: Array<NexusGenRootTypes['Item'] | null>; // [Item]!
  }
}

export interface NexusGenFieldTypeNames {
  AddOn: { // field return type name
    foods: 'Food'
    id: 'String'
    isRequired: 'Boolean'
    items: 'Item'
    name: 'String'
  }
  Food: { // field return type name
    addOns: 'AddOn'
    description: 'String'
    id: 'String'
    name: 'String'
    price: 'Float'
  }
  Item: { // field return type name
    addOns: 'AddOn'
    id: 'String'
    name: 'String'
    price: 'Float'
  }
  Mutation: { // field return type name
    createLink: 'Food'
  }
  Query: { // field return type name
    addOns: 'AddOn'
    foods: 'Food'
    items: 'Item'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createLink: { // args
      input: NexusGenInputs['CreateFoodInput']; // CreateFoodInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}