// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Food {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  description String?
  image       String?
  sizes       FoodSize[]
  price       Float?
  addOns      AddOn[]
  // orderItems  OrderItem[]
}

model FoodSize {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  price       Float
  foods       Food[]
  addOns      AddOn[]
}

model AddOn {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  isRequired Boolean
  foods      Food[]
  items      Item[]
  foodSizes  FoodSize[]
}

model Item {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String
  price      Float
  addOns     AddOn[]
  // orderItems OrderItem[]
  itemSizes  ItemSize[]
}

model ItemSize {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String
  price      Float
  default    Boolean?     @default(false)
  portions   ItemSizePortion[]
  items      Item[]
}

model ItemSizePortion {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String
  price      Float
  default    Boolean?     @default(false)
  itemSizes  ItemSize[]
}

// model OrderItem {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   food      Food?    @relation(fields: [foodId], references: [id])
//   foodId    String?
//   items     Item[]
//   order     Order?   @relation(fields: [orderId], references: [id])
//   orderId   String?
// }

// model Order {
//   id         String      @id @default(uuid())
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime    @updatedAt
//   total      Float
//   orderItems OrderItem[]
// }
